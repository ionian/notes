#linux-notes

#date: jul-07-2017
#from: packt publishing 'fundamentals of linux - oliver pelz'
#
#
#using vlc (shortcuts)
# - open up videos on '~/samba-share/videos by issueing the following
#   vlc ~/samba-share/videos/video*
#   this will open all the videos in a playlist
#   +  to view the playlist 'ctrl+L'
#   +  to toggle on screen buttons on/off 'ctrl+H'
#   +  to stop/play video 'spacebar'
#   +  to move forward/backward 1sec 'shift+ right/left arrow'
#   +  to move forward/backward 10sec 'ctrl+ right/left arrow'
#   +  to move forward/backward 60sec 'meta+ right/left arrow'
#   +  to move forward/backward 360sec 'alt+ right/left arrow'
#   +  to change settings 'ctrl+p' (then select show settings all)
#      ~ this is where you can change the move times above
   
#connect to your VM through SSH (video 1.5)
# - ???? (need to look through this video)
#
#file navigation (video 2.1)
# - using 'tree'
#   + 'tree -d -L 3 ~ | less 
#
#file globbing (video 2.2)
# - using [] in a file name to islolate results on a command
#       example: (in the /etc directory) ls -d rc[01234].d
#       result: rc0.d rc1.d rc2.d rc3.d rc4.d
#       example: (in the /etc directory) ls -d rc[!3-6].d
#       result: rco-d rc1.d rc2.d
#
#quoting in the shell (video 2.3)
# - use ' single quotes ' in the file command will allow
#   certain characters to not be taken literally
#       certain characters: * # [ ] . ~ ! $ { } < > | " ? & ^ - / \ ,
#       example: ls -l '!super!file!text'
#                -rw-rw-r--. 1 mike mike 0 Apr 11 07:29 !super!file!.txt
# - use " double quotes " in the file command wil allow
#   you to include the following $ ` \ ! " characters to output while
#   taking the certain characters literally
#       example: echo "* ! $SHELL"
#                * ! /bin/bash
# - use \ backslash to disable special meaning of the next char
#       example: echo \*
#                *
#date: jul-25-2017
#from vimeo 'getting git - scott chacon'
#
#
#git notes
# - information about the '.git' directory
#   the git directory host 4 things
#   'config file', 'hooks', 'index', 'references' and 'object database'
#
# - the 'object databases'
#   stores your content and creates a sha based on your content type and size.
#   + there are 4 types of git objects:
#     blobs, trees, commits, and tags
#     ~ in the 'working directory' every 'file' will be turned into a blob in the 'git directory'.
#     ~ in the 'working directory' every 'directory' will be turned into a tree in the 'git directory'.
#     ~ the commit object shows information about the current commit and points to a root tree where that commit is.
#         * it holds the commit msg, committer/author, the  parent info, and the initial tree pointer.
#     ~ a tag is a pointer to a commit, has a message, the tagger, what the tag is, and object that it's tagging.
#
# - 'references'
#    lightweight movable pointer that show where "HEAD", "branch", and "remotes" are currently to a commit.
#
# - 'index'
#    There are three locations where git works locally.
#    There is the 'working directory', the 'index', and the 'repository'
#    When you're in the 'working directory', a 'git add' will stage the chage into the 'index'.
#    When you're ready to commit everything that you've 'git add', the 'git commit' takes the change from 'index'
#    over to 'repository'.
#
#date: aug-04-2017
#from stackoverflow.com
#
#
#git notes
#
# - for '.gitignore', instead of stating the filenames to ignore into 'git add'
#   and 'git commit' in your local git repo, you can negate the filename with
#   a '!' in front of the filename to tell git to include into the 'git add'
#   and 'git commit.  Here's an example of the .gitignore file that would do
#   that:
#       + a good reason for doing this is you'll exclusively know what files
#         and directories are being included into the repo.
#       + another reason negating filenames is that you will have your
#         .gitignore file on a public repo, and if you put a list of ignore
#         files and directories into the .gitignore, the public will see
#         this, and it could expose vounerabilities.
# -----------------------------------------------------------------------------
#
# Ignore everything
# /*
# # ...even if they are in subdirectories
# #!*/


# # But not these files/directories...
# !.gitignore
# !dir1
# !dir1/*
# !dir1/*/*
# !file1
#
# -----------------------------------------------------------------------------
#
#date: aug-07-2017 
#from: cory schafer youtube 'how to create a network of machines in virtualbox with ssh access'
#      cory schafer youtube 'ssh key-based authentication to ssh without a password'
#
# - With my 3 X Debian8 virtual machines, I setup ssh with the following:
#   + first setup a virtual host adapter on all the machines with an ip 192.168.56.101-103
#      - go to the preferences on virtualbox and assign the virtualbox's virtual host adapter
#        by going to file>preferences>network>host-only-adapters(tab)> assign 192.168.56.1
#      - then go to each vm and to assign the machines' virtual host adapter
#        by going to machine>settings>network>adapter2(tab)>assign-adapter-to:host-only-network
#      - now go into each machine and edit the /etc/network/interfaces with similar config:
#              # The host-only network interface
#                auto eth1
#                iface eth1 inet static
#                address 192.168.56.103
#                netmask 255.255.255.0
#                network 192.168.56.0
#                broadcast 192.168.56.255
#      - you should now be able to ping from one machine to the next.
#   + second setup the ssh server on all the virtual machines. you can do the following:
#      - install openssh-server 'apt-get install openssh-server' on all the machines.
#      - make sure the ssh daemon is running 'sudo service sshd status'.
#      - test that you can ssh to each machine just with password authentication.
#      - then try to setup ssh key authentication
#              ~ here's the manual way to setup ssh key authentication.  alternately you
#                can do 'ssh-copy-id'.
#                    + 'ssh-keygen -t rsa -b 4096 -f ~/.ssh/dev1 -C "dev1"
#                    + this will create a private (keep on client) and public (keep on server) key
#                    + use scp to copy the public key over to the machine you'll be connecting to.
#                    + 'scp ~/.ssh/dev2.pub mike@debian-dev2:~/.ssh/dev2-uploaded_key.pub'
#                    + then go over to the mike@debian-dev2 machine and enter the following:
#                    + 'cat ~/.ssh/dev2-uploaded_key.pub >> authorized_keys 
#                    + go back over to mike@debian-dev1 machine and try to ssh into
#                      mike@debian-dev2 machine and see if it doesn't ask for password authentication.
#   + third step would be to setup the ~/.ssh/config file in order to assign a hostname and key file.
#     the hostname allows you to create a short name to use as the name when logging in.  The key file
#     allows you to direct where that hostname should find it's public key.
#              ~ to setup the config file, add the following similar lines into the config file:
#              #This is a list of machines that have ssh server running on them via their virtual host adapter.
#              
#              Host dev1
#                HostName debian-dev1
#                IdentityFile ~/.ssh/dev1
#              Host dev2
#                HostName debian-dev2
#                IdentityFile ~/.ssh/dev2
#              Host dev3
#                HostName debian-dev3
#                IdentityFile ~/.ssh/dev3
#
#              ~ now you should be able to ssh from debian-dev1 to debian-dev2 by doing these shorter comands:
#                  ssh mike@dev2
#
#from: https://confluence.atlassian.com/bitbucket/configure-multiple-ssh-identities-for-gitbash-mac-osx-linux-271943168.html
#this was a good resource as well to show how to shorten up some of the hostnames etc.



