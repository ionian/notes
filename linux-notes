#linux-notes

#date: jul-07-2017
#from: packt publishing 'fundamentals of linux - oliver pelz'
#
#
#using vlc (shortcuts)
# - open up videos on '~/samba-share/videos by issueing the following
#   vlc ~/samba-share/videos/video*
#   this will open all the videos in a playlist
#   +  to view the playlist 'ctrl+L'
#   +  to toggle on screen buttons on/off 'ctrl+H'
#   +  to stop/play video 'spacebar'
#   +  to move forward/backward 1sec 'shift+ right/left arrow'
#   +  to move forward/backward 10sec 'ctrl+ right/left arrow'
#   +  to move forward/backward 60sec 'meta+ right/left arrow'
#   +  to move forward/backward 360sec 'alt+ right/left arrow'
#   +  to change settings 'ctrl+p' (then select show settings all)
#      ~ this is where you can change the move times above
   
#connect to your VM through SSH (video 1.5)
# - ???? (need to look through this video)
#
#file navigation (video 2.1)
# - using 'tree'
#   + 'tree -d -L 3 ~ | less 
#
#file globbing (video 2.2)
# - using [] in a file name to islolate results on a command
#       example: (in the /etc directory) ls -d rc[01234].d
#       result: rc0.d rc1.d rc2.d rc3.d rc4.d
#       example: (in the /etc directory) ls -d rc[!3-6].d
#       result: rco-d rc1.d rc2.d
#
#quoting in the shell (video 2.3)
# - use ' single quotes ' in the file command will allow
#   certain characters to not be taken literally
#       certain characters: * # [ ] . ~ ! $ { } < > | " ? & ^ - / \ ,
#       example: ls -l '!super!file!text'
#                -rw-rw-r--. 1 mike mike 0 Apr 11 07:29 !super!file!.txt
# - use " double quotes " in the file command wil allow
#   you to include the following $ ` \ ! " characters to output while
#   taking the certain characters literally
#       example: echo "* ! $SHELL"
#                * ! /bin/bash
# - use \ backslash to disable special meaning of the next char
#       example: echo \*
#                *
#date: jul-25-2017
#from vimeo 'getting git - scott chacon'
#
#
#git notes
# - information about the '.git' directory
#   the git directory host 4 things
#   'config file', 'hooks', 'index', 'references' and 'object database'
#
# - the 'object databases'
#   stores your content and creates a sha based on your content type and size.
#   + there are 4 types of git objects:
#     blobs, trees, commits, and tags
#     ~ in the 'working directory' every 'file' will be turned into a blob in the 'git directory'.
#     ~ in the 'working directory' every 'directory' will be turned into a tree in the 'git directory'.
#     ~ the commit object shows information about the current commit and points to a root tree where that commit is.
#         * it holds the commit msg, committer/author, the  parent info, and the initial tree pointer.
#     ~ a tag is a pointer to a commit, has a message, the tagger, what the tag is, and object that it's tagging.
#
# - 'references'
#    lightweight movable pointer that show where "HEAD", "branch", and "remotes" are currently to a commit.
#
# - 'index'
#    There are three locations where git works locally.
#    There is the 'working directory', the 'index', and the 'repository'
#    When you're in the 'working directory', a 'git add' will stage the chage into the 'index'.
#    When you're ready to commit everything that you've 'git add', the 'git commit' takes the change from 'index'
#    over to 'repository'.
#
#date: aug-04-2017
#from stackoverflow.com
#
#
#git notes
#
# - for '.gitignore', instead of stating the filenames to ignore into 'git add'
#   and 'git commit' in your local git repo, you can negate the filename with
#   a '!' in front of the filename to tell git to include into the 'git add'
#   and 'git commit.  Here's an example of the .gitignore file that would do
#   that:
#
# -----------------------------------------------------------------------------
#
# Ignore everything
# /*
# # ...even if they are in subdirectories
# #!*/


# # But not these files/directories...
# !.gitignore
# !dir1
# !dir1/*
# !dir1/*/*
# !file1
#
# -----------------------------------------------------------------------------

